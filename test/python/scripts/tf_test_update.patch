diff --git a/tensorflow/python/kernel_tests/array_ops/gather_op_test.py b/tensorflow/python/kernel_tests/array_ops/gather_op_test.py
index 43d17cfc90c..dfbf66619ff 100644
--- a/tensorflow/python/kernel_tests/array_ops/gather_op_test.py
+++ b/tensorflow/python/kernel_tests/array_ops/gather_op_test.py
@@ -36,8 +36,8 @@ from tensorflow.python.ops import resource_variable_ops
 from tensorflow.python.ops import variables
 from tensorflow.python.platform import test
 
-_TEST_TYPES = (dtypes.int64, dtypes.float32,
-               dtypes.complex64, dtypes.complex128)
+_TEST_TYPES = (dtypes.int64, dtypes.float32)
+#               dtypes.complex64, dtypes.complex128)
 
 # TODO(virimia): Add a benchmark for gather_v2, with batch_dims and axis set.
 
diff --git a/tensorflow/python/kernel_tests/array_ops/unstack_op_test.py b/tensorflow/python/kernel_tests/array_ops/unstack_op_test.py
index 71bbc0667ce..20772ad9807 100644
--- a/tensorflow/python/kernel_tests/array_ops/unstack_op_test.py
+++ b/tensorflow/python/kernel_tests/array_ops/unstack_op_test.py
@@ -68,7 +68,7 @@ class UnstackOpTest(test.TestCase):
       rank = len(shape)
       for axis in range(-rank, rank):
         for dtype in [
-            np.bool_, np.float16, np.float32, np.float64, np.uint8, np.int32,
+            np.float32, np.int32,
             np.int64
         ]:
           data = self.randn(shape, dtype)
@@ -168,9 +168,10 @@ class UnstackOpTest(test.TestCase):
         array_ops.unstack(x)
 
   def testAgainstNumpy(self):
-    # For 1 to 5 dimensions.
-    for i in range(1, 6):
-      a = np.random.random(np.random.permutation(i) + 1)
+    for dtype in [np.int32, np.int64, np.float32]:
+      # For 1 to 5 dimensions.
+      for i in range(1, 6):
+        a = np.random.random(np.random.permutation(i) + 1).astype(dtype)
 
       # For all the possible axis to split it, including negative indices.
       for j in range(-i, i):
diff --git a/tensorflow/python/kernel_tests/array_ops/array_ops_test.py b/tensorflow/python/kernel_tests/array_ops/array_ops_test.py
index 8c6492dc53a..e2c436fc1f0 100644
--- a/tensorflow/python/kernel_tests/array_ops_test.py
+++ b/tensorflow/python/kernel_tests/array_ops_test.py
@@ -609,9 +609,7 @@ class StridedSliceChecker(object):
 
 
 STRIDED_SLICE_TYPES = [
-    dtypes.int32, dtypes.int64, dtypes.int16, dtypes.int8, dtypes.uint8,
-    dtypes.float32, dtypes.float64, dtypes.complex64, dtypes.complex128,
-    dtypes.bool
+    dtypes.int32, dtypes.int64, dtypes.float32
 ]
 
 
diff --git a/tensorflow/python/kernel_tests/shape_ops_test.py b/tensorflow/python/kernel_tests/shape_ops_test.py
index cfd216f1d3f..997433b67e9 100644
--- a/tensorflow/python/kernel_tests/shape_ops_test.py
+++ b/tensorflow/python/kernel_tests/shape_ops_test.py
@@ -187,25 +187,26 @@ class ShapeOpsTest(test.TestCase):
     self._compareExpandDims(x, dim, True)
 
   def testExpandDims(self):
-    self._compareExpandDimsAll(np.zeros([2]), 0)
-    self._compareExpandDimsAll(np.zeros([2]), 1)
-    self._compareExpandDimsAll(np.zeros([2]), -1)
-
-    self._compareExpandDimsAll(np.zeros([2, 3]), 0)
-    self._compareExpandDimsAll(np.zeros([2, 3]), 1)
-    self._compareExpandDimsAll(np.zeros([2, 3]), 2)
-    self._compareExpandDimsAll(np.zeros([2, 3]), -1)
-    self._compareExpandDimsAll(np.zeros([2, 3]), -2)
-
-    self._compareExpandDimsAll(np.zeros([2, 3, 5]), 0)
-    self._compareExpandDimsAll(np.zeros([2, 3, 5]), 1)
-    self._compareExpandDimsAll(np.zeros([2, 3, 5]), 2)
-    self._compareExpandDimsAll(np.zeros([2, 3, 5]), 3)
-
-    self._compareExpandDimsAll(np.zeros([2, 3, 5]), -1)
-    self._compareExpandDimsAll(np.zeros([2, 3, 5]), -2)
-    self._compareExpandDimsAll(np.zeros([2, 3, 5]), -3)
-    self._compareExpandDimsAll(np.zeros([2, 3, 5]), -4)
+    for dtype in [np.int32, np.int64, np.float32]:
+        self._compareExpandDimsAll(np.zeros([2], dtype=dtype), 0)
+        self._compareExpandDimsAll(np.zeros([2], dtype=dtype), 1)
+        self._compareExpandDimsAll(np.zeros([2], dtype=dtype), -1)
+
+        self._compareExpandDimsAll(np.zeros([2, 3], dtype=dtype), 0)
+        self._compareExpandDimsAll(np.zeros([2, 3], dtype=dtype), 1)
+        self._compareExpandDimsAll(np.zeros([2, 3], dtype=dtype), 2)
+        self._compareExpandDimsAll(np.zeros([2, 3], dtype=dtype), -1)
+        self._compareExpandDimsAll(np.zeros([2, 3], dtype=dtype), -2)
+
+        self._compareExpandDimsAll(np.zeros([2, 3, 5], dtype=dtype), 0)
+        self._compareExpandDimsAll(np.zeros([2, 3, 5], dtype=dtype), 1)
+        self._compareExpandDimsAll(np.zeros([2, 3, 5], dtype=dtype), 2)
+        self._compareExpandDimsAll(np.zeros([2, 3, 5], dtype=dtype), 3)
+
+        self._compareExpandDimsAll(np.zeros([2, 3, 5], dtype=dtype), -1)
+        self._compareExpandDimsAll(np.zeros([2, 3, 5], dtype=dtype), -2)
+        self._compareExpandDimsAll(np.zeros([2, 3, 5], dtype=dtype), -3)
+        self._compareExpandDimsAll(np.zeros([2, 3, 5], dtype=dtype), -4)
 
   def testExpandDimsBool(self):
     choice = lambda s: np.random.choice((False, True), size=s)
@@ -265,13 +266,14 @@ class ShapeOpsTest(test.TestCase):
 
   def testExpandDimsDimType(self):
     for dtype in [dtypes.int32, dtypes.int64]:
-      x = np.zeros([2])
-      np_ans = np.expand_dims(x, axis=0)
-      with self.cached_session():
-        tensor = array_ops.expand_dims(x, constant_op.constant(0, dtype))
-        tf_ans = self.evaluate(tensor)
-      self.assertShapeEqual(np_ans, tensor)
-      self.assertAllEqual(np_ans, tf_ans)
+      for npdtype in [np.int32, np.int64]:
+        x = np.zeros([2], dtype=npdtype)
+        np_ans = np.expand_dims(x, axis=0)
+        with self.cached_session():
+            tensor = array_ops.expand_dims(x, constant_op.constant(0, dtype))
+            tf_ans = self.evaluate(tensor)
+        self.assertShapeEqual(np_ans, tensor)
+        self.assertAllEqual(np_ans, tf_ans)
 
   def _compareSqueeze(self, x, squeeze_dims, use_gpu):
     with self.cached_session(use_gpu=use_gpu):
@@ -293,15 +295,16 @@ class ShapeOpsTest(test.TestCase):
     self._compareSqueeze(x, squeeze_dims, True)
 
   def testSqueeze(self):
-    # Nothing to squeeze.
-    self._compareSqueezeAll(np.zeros([2]))
-    self._compareSqueezeAll(np.zeros([2, 3]))
+    for dtype in [np.int32, np.int64, np.float32]:
+      # Nothing to squeeze.
+      self._compareSqueezeAll(np.zeros([2], dtype=dtype))
+      self._compareSqueezeAll(np.zeros([2, 3], dtype=dtype))
 
-    # Squeeze the middle element away.
-    self._compareSqueezeAll(np.zeros([2, 1, 2]))
+      # Squeeze the middle element away.
+      self._compareSqueezeAll(np.zeros([2, 1, 2], dtype=dtype))
 
-    # Squeeze on both ends.
-    self._compareSqueezeAll(np.zeros([1, 2, 1, 3, 1]))
+      # Squeeze on both ends.
+      self._compareSqueezeAll(np.zeros([1, 2, 1, 3, 1], dtype=dtype))
 
   def testSqueezeBool(self):
     choice = lambda s: np.random.choice((False, True), size=s)
@@ -316,15 +319,16 @@ class ShapeOpsTest(test.TestCase):
     self._compareSqueezeAll(choice([1, 2, 1, 3, 1]))
 
   def testSqueezeSpecificDimension(self):
-    # Positive squeeze dim index.
-    self._compareSqueezeAll(np.zeros([1, 2, 1, 3, 1]), [0])
-    self._compareSqueezeAll(np.zeros([1, 2, 1, 3, 1]), [2, 4])
-    self._compareSqueezeAll(np.zeros([1, 2, 1, 3, 1]), [0, 4, 2])
+    for dtype in [np.int32, np.int64, np.float32]:
+      # Positive squeeze dim index.
+      self._compareSqueezeAll(np.zeros([1, 2, 1, 3, 1], dtype=dtype), [0])
+      self._compareSqueezeAll(np.zeros([1, 2, 1, 3, 1], dtype=dtype), [2, 4])
+      self._compareSqueezeAll(np.zeros([1, 2, 1, 3, 1], dtype=dtype), [0, 4, 2])
 
-    # Negative squeeze dim index.
-    self._compareSqueezeAll(np.zeros([1, 2, 1, 3, 1]), [-1])
-    self._compareSqueezeAll(np.zeros([1, 2, 1, 3, 1]), [-3, -5])
-    self._compareSqueezeAll(np.zeros([1, 2, 1, 3, 1]), [-3, -5, -1])
+      # Negative squeeze dim index.
+      self._compareSqueezeAll(np.zeros([1, 2, 1, 3, 1], dtype=dtype), [-1])
+      self._compareSqueezeAll(np.zeros([1, 2, 1, 3, 1], dtype=dtype), [-3, -5])
+      self._compareSqueezeAll(np.zeros([1, 2, 1, 3, 1], dtype=dtype), [-3, -5, -1])
 
   def testSqueezeSpecificDimensionBool(self):
     choice = lambda s: np.random.choice((False, True), size=s)
@@ -341,12 +345,13 @@ class ShapeOpsTest(test.TestCase):
   def testSqueezeAllOnes(self):
     # Numpy squeezes a 1 element tensor into a zero dimensional tensor.
     # Verify that we do the same.
-    for use_gpu in [False, True]:
-      with self.cached_session(use_gpu=use_gpu):
-        tensor = array_ops.squeeze(np.zeros([1, 1, 1]), [])
-        self.assertEqual(np.shape(1), tensor.get_shape())
-        tf_ans = self.evaluate(tensor)
-        self.assertEqual(np.shape(1), tf_ans.shape)
+    for dtype in [np.int32, np.int64, np.float32]:
+      for use_gpu in [False, True]:
+        with self.cached_session(use_gpu=use_gpu):
+          tensor = array_ops.squeeze(np.zeros([1, 1, 1], dtype=dtype), [])
+          self.assertEqual(np.shape(1), tensor.get_shape())
+          tf_ans = self.evaluate(tensor)
+          self.assertEqual(np.shape(1), tf_ans.shape)
 
   def testSqueezeAllOnesBool(self):
     # Numpy squeezes a 1 element tensor into a zero dimensional tensor.
@@ -360,13 +365,14 @@ class ShapeOpsTest(test.TestCase):
 
   @test_util.run_deprecated_v1
   def testSqueezeOnlyOnes(self):
-    for use_gpu in [False, True]:
-      with self.cached_session(use_gpu=use_gpu):
-        input_1x1x3 = np.zeros([1, 1, 3])
-        self._compareSqueezeAll(input_1x1x3)
-        self._compareSqueezeAll(input_1x1x3, [0])
-        self._compareSqueezeAll(input_1x1x3, [1])
-        self.assertRaises(ValueError, array_ops.squeeze, input_1x1x3, [2])
+    for dtype in [np.int32, np.int64, np.float32]:
+      for use_gpu in [False, True]:
+        with self.cached_session(use_gpu=use_gpu):
+          input_1x1x3 = np.zeros([1, 1, 3], dtype=dtype)
+          self._compareSqueezeAll(input_1x1x3)
+          self._compareSqueezeAll(input_1x1x3, [0])
+          self._compareSqueezeAll(input_1x1x3, [1])
+          self.assertRaises(ValueError, array_ops.squeeze, input_1x1x3, [2])
 
   @test_util.run_deprecated_v1
   def testSqueezeErrors(self):
diff --git a/tensorflow/python/kernel_tests/split_op_test.py b/tensorflow/python/kernel_tests/split_op_test.py
index 2abbd44ad8b..e335863c83d 100644
--- a/tensorflow/python/kernel_tests/split_op_test.py
+++ b/tensorflow/python/kernel_tests/split_op_test.py
@@ -30,8 +30,7 @@ from tensorflow.python.ops import gradients_impl
 from tensorflow.python.ops import math_ops
 from tensorflow.python.platform import test
 
-_TEST_DTYPES = (dtypes.float32, dtypes.float64, dtypes.complex64,
-                dtypes.complex128)
+_TEST_DTYPES = (dtypes.int32, dtypes.float32)
 
 
 class SplitOpTest(test.TestCase):
